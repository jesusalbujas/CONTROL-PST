services:
  postgresql.service:
    container_name: ${POSTGRES_HOST}
    image: ${POSTGRES_IMAGE}
    restart: ${GENERIC_RESTART}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres_volume:/var/lib/postgresql/data
      - ./postgresql/init.sh:/docker-entrypoint-initdb.d/init.sh
      # - ./postgresql/seed.backup:/tmp/seed.backup # System DB
      - ./postgresql/keycloak.backup:/tmp/keycloak.backup # Keycloak DB
      - ./postgresql/after_run:/tmp/after_run
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - shared_network
  
  adempiere.site:
    image: ${ADEMPIERE_SITE_IMAGE}
    container_name: ${ADEMPIERE_SITE_HOST}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_SITE_PORT}:80
    environment:
      ZK_HOST: ${ADEMPIERE_SITE_ZK_HOST}
      VUE_HOST: ${ADEMPIERE_SITE_VUE_HOST}
    networks:
      - shared_network

  keycloak:
    image: ${KEYCLOAK_IMAGE}
    container_name: ${KEYCLOAK_HOST}
    restart: ${GENERIC_RESTART}
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KEYCLOAK_DB_VENDOR}
      DB_DATABASE: ${KEYCLOAK_DB_DATABASE}
      DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      KC_DB_USERNAME: ${ADEMPIERE_DB_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL: ${KEYCLOAK_DB_HOST}
    command: "start-dev --import-realm"
    ports:
      - ${KEYCLOAK_PORT}:8080
    volumes:
      - ./keycloak/master-realm.json:/opt/keycloak/data/import/master-realm.json
      - ./keycloak/adempiere-realm.json:/opt/keycloak/data/import/adempiere-realm.json
      - ./keycloak/university-theme/:/opt/keycloak/themes/university-theme
    networks:
      - shared_network

  api.keycloak.adempiere:
    image: ${API_KEYCLOAK_IMAGE}
    container_name: ${API_KEYCLOAK_NAME}
    restart: ${GENERIC_RESTART}
    environment:
      ADEMPIERE_DB_NAME: ${ADEMPIERE_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_DB_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      KEYCLOAK_DB_DATABASE: ${KEYCLOAK_DB_DATABASE}
      DB_HOST: ${SERVER_NAME}
      API_PORT: ${API_PORT}
    # APPWRITE ENV
      APPWRITE_ENDPOINT: ${APPWRITE_ENDPOINT}
      APPWRITE_PROJECT_ID: ${APPWRITE_PROJECT_ID}
      APPWRITE_API_KEY: ${APPWRITE_API_KEY}
      APPWRITE_DATABASE_ID: ${APPWRITE_DATABASE_ID}
      APPWRITE_COLLECTION_ID: ${APPWRITE_COLLECTION_ID}
      APPWRITE_TOPICS_COLLECTION_ID: ${APPWRITE_TOPICS_COLLECTION_ID}
      APPWRITE_TIPOLOGY_COLLECTION_ID: ${APPWRITE_TIPOLOGY_COLLECTION_ID}
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - shared_network

  adempiere.zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_HOST}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_ZK_PORT}:8080
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/postgresql.service/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      ADEMPIERE_DB_SERVER: ${ADEMPIERE_ZK_DB_HOST}
      ADEMPIERE_DB_NAME: ${ADEMPIERE_ZK_DB_NAME}
      ADEMPIERE_DB_USER: ${ADEMPIERE_ZK_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_ZK_DB_PASSWORD}
      ADEMPIERE_ZK_DB_PORT: ${ADEMPIERE_ZK_DB_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    networks:
      - shared_network

networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  postgres_volume:
    name: ${POSTGRES_VOLUME}