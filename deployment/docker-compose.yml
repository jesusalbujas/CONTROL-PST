services:
  postgresql.service:
    container_name: ${POSTGRES_HOST}
    image: ${POSTGRES_IMAGE}
    restart: ${GENERIC_RESTART}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres_volume:/var/lib/postgresql/data
      - ./postgresql/init.sh:/docker-entrypoint-initdb.d/init.sh
      # - ./postgresql/seed.backup:/tmp/seed.backup # System DB
      - ./postgresql/keycloak.backup:/tmp/keycloak.backup # Keycloak DB
      - ./postgresql/after_run:/tmp/after_run
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - shared_network
  
  adempiere.site:
    image: ${ADEMPIERE_SITE_IMAGE}
    container_name: ${ADEMPIERE_SITE_HOST}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${ADEMPIERE_SITE_PORT}:80
    environment:
      ZK_HOST: ${ADEMPIERE_SITE_ZK_HOST}
      VUE_HOST: ${ADEMPIERE_SITE_VUE_HOST}
    networks:
      - shared_network

  keycloak:
    image: ${KEYCLOAK_IMAGE}
    container_name: ${KEYCLOAK_HOST}
    restart: ${GENERIC_RESTART}
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: ${KEYCLOAK_DB_VENDOR}
      DB_DATABASE: ${KEYCLOAK_DB_DATABASE}
      DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      KC_DB_USERNAME: ${ADEMPIERE_DB_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_DB_URL: ${KEYCLOAK_DB_HOST}
    command: "start-dev --import-realm"
    ports:
      - ${KEYCLOAK_PORT}:8080
    volumes:
      - ./keycloak/master-realm.json:/opt/keycloak/data/import/master-realm.json
      - ./keycloak/adempiere-realm.json:/opt/keycloak/data/import/adempiere-realm.json
      - ./keycloak/university-theme/:/opt/keycloak/themes/university-theme
    networks:
      - shared_network

  api.keycloak.adempiere:
    image: ${API_KEYCLOAK_IMAGE}
    container_name: ${API_KEYCLOAK_NAME}
    restart: ${GENERIC_RESTART}
    environment:
      ADEMPIERE_DB_NAME: ${ADEMPIERE_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_DB_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      KEYCLOAK_DB_DATABASE: ${KEYCLOAK_DB_DATABASE}
      DB_HOST: ${SERVER_NAME}
      API_PORT: ${API_PORT}
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - shared_network

  adempiere.zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_HOST}
    restart: ${GENERIC_RESTART}
    ports:
      - ${ADEMPIERE_ZK_PORT}:8080
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/postgresql.service/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      ADEMPIERE_DB_SERVER: ${ADEMPIERE_ZK_DB_HOST}
      ADEMPIERE_DB_NAME: ${ADEMPIERE_ZK_DB_NAME}
      ADEMPIERE_DB_USER: ${ADEMPIERE_ZK_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_ZK_DB_PASSWORD}
      ADEMPIERE_ZK_DB_PORT: ${ADEMPIERE_ZK_DB_PORT}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    networks:
      - shared_network

  # adempiere.grpc.server:
  #   image: ${GRPC_SERVER_IMAGE}
  #   container_name: ${GRPC_SERVER_HOST}
  #   restart: ${GENERIC_RESTART}
  #   healthcheck:
  #     test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/postgresql.service/5432; exit $?;'"
  #     interval: 10s
  #     retries: 60
  #     start_period: 20s
  #     timeout: 10s
  #   environment:
  #     SERVER_PORT: ${GRPC_SERVER_PORT}
  #     DB_HOST: ${GRPC_SERVER_DB_HOST}
  #     DB_PORT: ${GRPC_SERVER_DB_PORT}
  #     DB_NAME: ${GRPC_SERVER_DB_NAME}
  #     DB_USER: ${GRPC_SERVER_DB_USER}
  #     DB_PASSWORD: ${GRPC_SERVER_DB_PASSWORD}
  #     JWT_SECRET_KEY: ${GRPC_SERVER_JWT_SECRET_KEY}
  #     JAVA_OPTIONS: ${GRPC_JAVA_OPTIONS}
  #   volumes:
  #     - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
  #     - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
  #   deploy:
  #     resources:
  #       limits:
  #         memory: '1000M' # Memory Limit
  #         cpus: '1'
  #   networks:
  #     - shared_network

  # grpc.proxy:
  #   image: ${GRPC_PROXY_BACKEND_IMAGE}
  #   container_name: ${GRPC_PROXY_HOST}
  #   healthcheck:
  #     test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${GRPC_PROXY_BACKEND_PORT}; exit $?;'"
  #     interval: 10s
  #     retries: 60
  #     start_period: 20s
  #     timeout: 10s
  #   environment:
  #     SERVER_PORT: ${GRPC_PROXY_BACKEND_PORT}
  #     BACKEND_HOST: ${GRPC_PROXY_BACKEND_HOST}
  #     BACKEND_PORT: ${GRPC_PROXY_BACKEND_SERVER_PORT}
  #   volumes:
  #     - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
  #     - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
  #   deploy:
  #     resources:
  #       limits:
  #         memory: '1600M' # Memory Limit
  #         cpus: '1'
  #   networks:
  #   - shared_network

  # vue.ui:
  #   image: ${VUE_UI_IMAGE}
  #   container_name: ${VUE_UI_HOST}
  #   restart: ${GENERIC_RESTART}
  #   environment:
  #     API_URL: ${VUE_UI_API_URL}
  #     PUBLIC_PATH: ${VUE_UI_PUBLIC_PATH}
  #   volumes:
  #     - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
  #     - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
  #   deploy:
  #     resources:
  #       limits:
  #         memory: '300M' # Memory Limit
  #         cpus: '0.2'
  #   networks:
  #     - shared_network

  # ui.gateway:
  #   image: ${GATEWAY_IMAGE}
  #   container_name: ${GATEWAY_HOST}
  #   depends_on:
  #     grpc.proxy:
  #       condition: service_healthy
  #     adempiere.site:
  #       condition: service_started
  #   ports:
  #     - ${GATEWAY_PORT}:80
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
  #     - ./nginx/api_json_errors.conf:/etc/nginx/api_json_errors.conf
  #     # backend
  #     - ./nginx/upstreams/adempiere_backend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_backend.conf
  #     - ./nginx/api/backend/:/etc/nginx/api_conf.d/backend/
  #     # vue
  #     - ./nginx/upstreams/adempiere_frontend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_frontend.conf
  #     - ./nginx/api/main/vue.conf:/etc/nginx/api_conf.d/main/vue.conf
  #     # # zk
  #     # - ./nginx/upstreams/adempiere_zk.conf:/etc/nginx/api_upstreams_conf.d/adempiere_zk.conf
  #     # - ./nginx/api/main/zk.conf:/etc/nginx/api_conf.d/main/zk.conf
  #     # landing page
  #     - ./nginx/upstreams/landing_page.conf:/etc/nginx/api_upstreams_conf.d/landing_page.conf
  #     - ./nginx/api/main/main.conf:/etc/nginx/api_conf.d/main/main.conf
  #   networks:
  #     - shared_network


networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  postgres_volume:
    name: ${POSTGRES_VOLUME}