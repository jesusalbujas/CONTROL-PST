services:
  postgresql.service:
    container_name: ${POSTGRES_NAME}
    image: ${POSTGRES_IMAGE}
    restart: ${GENERIC_RESTART}
    volumes:
      - ${POSTGRES_VOLUME}:/var/lib/postgresql/data
      - ./postgresql/initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - ./postgresql/seed.backup:/tmp/seed.backup
      - ./postgresql/after_run:/tmp/after_run
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - shared_network
  
  adempiere.zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_NAME}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${ADEMPIERE_ZK_PORT}:8080
    environment:
      ADEMPIERE_DB_SERVER: ${POSTGRES_NAME}
      ADEMPIERE_DB_USER: ${ADEMPIERE_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_DB_PASSWORD}
    depends_on:
      postgresql.service:
        condition: service_healthy
    networks:
      - shared_network 

  adempiere.site:
    image: ${ADEMPIERE_SITE_IMAGE}
    container_name: ${ADEMPIERE_SITE_NAME}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${ADEMPIERE_SITE_PORT}:80
    environment:
      ZK_HOST: ${ADEMPIERE_SITE_ZK_HOST}
      VUE_HOST: ${ADEMPIERE_SITE_VUE_HOST}
    depends_on:
      - adempiere.zk
    networks:
      - shared_network 
 
  adempiere.grpc.server:
    image: ${ADEMPIERE_GRPC_SERVER_IMAGE}
    container_name: ${ADEMPIERE_GRPC_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/50059; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      DB_HOST: ${POSTGRES_NAME}
    depends_on:
      postgresql.service:
        condition: service_healthy
    networks:
      - shared_network

  grpc.proxy:
    image: ${ENVOY_IMAGE_NAME}
    container_name: ${ENVOY_NAME}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5555; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./envoy/definitions/adempiere-grpc-server.pb:/data/adempiere-grpc-server.pb:ro
      - ./envoy/definitions/adempiere-processors-service-service.pb:/data/adempiere-processors-service-service.pb:ro
    depends_on:
      - adempiere.grpc.server
    # ports:
    #   - 5555:5555
    networks:
      - shared_network

  # vue.ui:
  #   image: ${VUE_UI_IMAGE}
  #   container_name: ${VUE_UI_HOST}
  #   restart: ${GENERIC_RESTART}
  #   # ports:
  #   #   - ${VUE_UI_PORT}:80
  #   environment:
  #     API_URL: ${VUE_UI_API_URL}
  #     PUBLIC_PATH: ${VUE_UI_PUBLIC_PATH}
  #   networks:
  #     - shared_network

  zookeeper:
    image: ${ZOOKEEPER_IMAGE}
    container_name: ${ZOOKEEPER_HOST}
    restart: ${GENERIC_RESTART}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - ${ZOOKEEPER_PORT}:2181
    networks:
      - shared_network
  
  kafka:
    image: ${KAFKA_IMAGE}
    container_name: ${KAFKA_HOST}
    restart: ${GENERIC_RESTART}
    # depends_on:
    #   - zookeeper
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9200; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    ports:
      - ${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_INTERNAL_HOST},PLAINTEXT_HOST://${KAFKA_BROKER_HOST}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - shared_network
  
  opensearch:
    image: ${OPENSEARCH_IMAGE}
    container_name: ${OPENSEARCH_HOST}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9200; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s 
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    environment:
      - node.name=opensearch.node
      - discovery.type=single-node
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    ports:
      - ${OPENSEARCH_PORT}:9200
    #   - ${OPENSEARCH_PERFORMANCE_PORT}:9600 # required for Performance Analyzer
    volumes:
      - volume_opensearch:/usr/share/opensearch/data
      - ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./opensearch/snapshots:/mnt/snapshots
    networks:
      - shared_network

  opensearch.setup:
    build:
      context: opensearch/
      dockerfile: setup.Dockerfile
    container_name: ${OPENSEARCH_SETUP_CONTAINER_NAME}
    depends_on:
      opensearch:
        condition: service_healthy
    environment:
      OPENSEARCH_HOST: ${OPENSEARCH_SETUP_OPENSEARCH_HOST}
    networks:
      - shared_network
  
  dictionary.rs:
    image: ${DICTIONARY_RS_IMAGE}
    container_name: ${DICTIONARY_RS_HOST}
    depends_on:
      opensearch:
        condition: service_started
      kafka:
        condition: service_started
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/7878; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      KAFKA_HOST: ${DICTIONARY_RS_KAFKA_HOST}
      OPENSEARCH_URL: ${DICTIONARY_RS_OPENSEARCH_URL}
      ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}
    networks:
      - shared_network

  keycloak:
    image: ${KEYCLOAK_IMAGE}
    container_name: ${KEYCLOAK_HOST}
    restart: ${GENERIC_RESTART}
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      DB_VENDOR: ${KEYCLOAK_DB_VENDOR}
      DB_ADDR: ${KEYCLOAK_DB_HOST}
      DB_DATABASE: ${KEYCLOAK_DB_DATABASE}
      DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SERVER: ${SERVER_NAME}
    command: "start-dev --import-realm"
    ports:
      - ${KEYCLOAK_PORT}:8080
    volumes:
      - ./keycloak/master-realm.json:/opt/keycloak/data/import/master-realm.json
      - ./keycloak/adempiere-realm.json:/opt/keycloak/data/import/adempiere-realm.json
      - ./keycloak/university-theme/:/opt/keycloak/themes/university-theme
    networks:
      - shared_network

  ui.gateway:
    image: ${NGINX_UI_GATEWAY_IMAGE}
    container_name: ${NGINX_UI_GATEWAY_CONTAINER_NAME}
    depends_on:
      grpc.proxy:
        condition: service_healthy
      dictionary.rs:
        condition: service_started
      vue.ui:
        condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ./nginx/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      # s3
      # - ./nginx/upstreams/s3_storage.conf:/etc/nginx/api_upstreams_conf.d/s3_storage.conf
      # - ./nginx/upstreams/s3_console_ui.conf:/etc/nginx/api_upstreams_conf.d/s3_console_ui.conf
      # - ./nginx/upstreams/s3_gateway_rs.conf:/etc/nginx/api_upstreams_conf.d/s3_gateway_rs.conf
      # - ./nginx/api/s3/:/etc/nginx/api_conf.d/s3/
      # grpc proxy
      - ./nginx/upstreams/adempiere_backend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_backend.conf
      - ./nginx/upstreams/landing_page.conf:/etc/nginx/api_upstreams_conf.d/landing_page.conf
      - ./nginx/upstreams/adempiere_zk.conf:/etc/nginx/api_upstreams_conf.d/adempiere_zk.conf
      - ./nginx/upstreams/dictionary_rs.conf:/etc/nginx/api_upstreams_conf.d/dictionary_rs.conf
      - ./nginx/api/backend/:/etc/nginx/api_conf.d/backend/
      # vue
      - ./nginx/upstreams/adempiere_frontend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_frontend.conf
      - ./nginx/api/main/main.conf:/etc/nginx/api_conf.d/main/main.conf
      - ./nginx/api/main/zk.conf:/etc/nginx/api_conf.d/main/zk.conf
      - ./nginx/api/main/vue.conf:/etc/nginx/api_conf.d/main/vue.conf
      - ./nginx/api/dictionary_rs/:/etc/nginx/api_conf.d/dictionary_rs/
    ports:
      - ${NGINX_UI_GATEWAY_EXTERNAL_PORT}:80
    networks:
      - shared_network

networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  volume_nginx:
    name: ${NGINX_UI_GATEWAY_VOLUME}
  volume_envoy:
    name: ${ENVOY_VOLUME}
  volume_postgres:
    name: ${POSTGRES_VOLUME}
  volume_opensearch:
    name: ${OPENSEARCH_VOLUME}
